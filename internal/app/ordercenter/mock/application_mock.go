// Code generated by MockGen. DO NOT EDIT.
// Source: application/applicationservice.go

// Package mock is a generated GoMock package.
package mock

import (
	errors "pjhu/medicine/pkg/errors"
	application "pjhu/medicine/internal/app/ordercenter/application"
	domain "pjhu/medicine/internal/app/ordercenter/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIApplicationService is a mock of IApplicationService interface.
type MockIApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockIApplicationServiceMockRecorder
}

// MockIApplicationServiceMockRecorder is the mock recorder for MockIApplicationService.
type MockIApplicationServiceMockRecorder struct {
	mock *MockIApplicationService
}

// NewMockIApplicationService creates a new mock instance.
func NewMockIApplicationService(ctrl *gomock.Controller) *MockIApplicationService {
	mock := &MockIApplicationService{ctrl: ctrl}
	mock.recorder = &MockIApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIApplicationService) EXPECT() *MockIApplicationServiceMockRecorder {
	return m.recorder
}

// GetOrderDetail mocks base method.
func (m *MockIApplicationService) GetOrderDetail(id int64) (domain.UserOrder, *errors.ErrorWithCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", id)
	ret0, _ := ret[0].(domain.UserOrder)
	ret1, _ := ret[1].(*errors.ErrorWithCode)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockIApplicationServiceMockRecorder) GetOrderDetail(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockIApplicationService)(nil).GetOrderDetail), id)
}

// PlaceOrderHandler mocks base method.
func (m *MockIApplicationService) PlaceOrderHandler(placeOrderCommand application.PlaceOrderCommand) (application.PlaceOrderResponse, *errors.ErrorWithCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrderHandler", placeOrderCommand)
	ret0, _ := ret[0].(application.PlaceOrderResponse)
	ret1, _ := ret[1].(*errors.ErrorWithCode)
	return ret0, ret1
}

// PlaceOrderHandler indicates an expected call of PlaceOrderHandler.
func (mr *MockIApplicationServiceMockRecorder) PlaceOrderHandler(placeOrderCommand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrderHandler", reflect.TypeOf((*MockIApplicationService)(nil).PlaceOrderHandler), placeOrderCommand)
}
